## Testing Overview

This file shows the ad-hoc methods I used to test code in the project and some notes on SQL injection security.

I used Postman and Curl as in the examples below to do some ad-hoc tests after each route was completed.

And, I ran ad-hoc SQL queries using the terminal to check out the database.

The queries helped me with selecting primary key values for CRUD operations and so on.

And it gave me a snapshot of the database each time to ensure the API call worked correctly.

All my Post or Put routes require the user to select an appropriate id for the key.

---

## SQLite Shell Commands

Useful shell commands in SQLite:

- 'sqlite3 challenge.db' followed by '.schema' shows the schema.
- To enforce foreign keys in sqlite use: 'pragma foreign_keys = ON;'
- To turn on JSON mode use '.mode json'. Use '.headers on' for column names to appear.

---

## Notes on SQL Injection Security, Routes and Error Handling

On SQL injection concerns: every statement in the code uses only placeholders (?) in queries. There is no parameter concatention in a query.

I could also run some tests of common SQL injection type queries in calls to the API to verify security.

To take security one step further, an object tier class could be used to create objects (ORM) from the endpoint URLs.

This could ensure that no data from an endpoint interacts with the database directly.

An approach I can use for unit tests is to make a class with variables for URL response code, JSON data returned for a get, etc.

All of my Put and Post routes use an exception handler that returns true or false dependent upon success.

I use a statement to print the exception error in console which is useful to show SQL errors.

In Curl a -i flag shows the http codes for success or failure.

---

## Sample ad-hoc tests I did using Curl. And I ran SQL queries for a database snapshot after requests of Post or Put.

curl -i http://localhost:4567/items

curl -i http://localhost:4567/item/100

curl -i http://localhost:4567/itemOfferings/1

curl -i http://localhost:4567/cheapest_price/1/25

curl -i http://localhost:4567/cheapest_price/2/50

curl -X DELETE http://localhost:4567/inventory/80

curl -X DELETE http://localhost:4567/distributors/5

curl -X POST http://localhost:4567/item \
-H "Content-Type: application/json" \
-d '{"id":711, "name":"Candy Worms"}'
# Response: {"inserted":true}
# item existed in database

curl -X POST http://localhost:4567/inventory -H "Content-Type: application/json" -d '{"id":21, "item": 2, "stock":5, "capacity": 1000}'
# Response: {"inserted":true}
# item existed after a query

curl -X PUT http://localhost:4567/inventory \
  -H "Content-Type: application/json" \
  -d '{"id": 21, "item": 2, "stock": 100, "capacity": 150}'
# Response :{"updated":true}
# item existed a query

curl -X POST http://localhost:4567/distributors \
  -H "Content-Type: application/json" \
  -d '{"id": 5, "name": "Haribo Inc."}'
# Response: {"inserted":true}

 curl -X POST http://localhost:4567/distributor_prices \                                    -H "Content-Type: application/json" \
  -d '{"id": 29, "distributor": 1, "item": 99, "cost": 2}'
# response {"inserted":false}
# correctly returned because id 29 exists already.

curl -X POST http://localhost:4567/distributor_prices   -H "Content-Type: application/json"   -d '{"id": 30, "distributor": 1, "item": 99, "cost": 2}'
# response {"inserted":true}

