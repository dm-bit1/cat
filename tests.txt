## Testing Overview

This file shows the ad-hoc methods I used to test code in the project.

I used Curl as in the examples below to do some ad-hoc tests after each route was completed.

And, I ran ad-hoc SQL queries using the terminal to check out the database.

The queries helped me with selecting primary key values for CRUD operations and so on.

And it gave me a snapshot of the database each time to ensure the API call worked correctly.

All my Post or Put routes require the user to select an appropriate id for the key.

---

## SQLite Shell Commands

Useful shell commands in SQLite:

- 'sqlite3 challenge.db' followed by '.schema' shows the schema.
- To enforce foreign keys in sqlite use: 'pragma foreign_keys = ON;'
- To turn on JSON mode use '.mode json'. Use '.headers on' for column names to appear.

---

## Notes on Routes and Error Handling

It is entirely possible to write unit tests that validate any function and how it returns data.

All of my Put and Post routes use an exception handler that returns true or false dependent upon success and the stack trace prints in Main which is useful to show the SQL error.

- The -i flag in Curl shows the http codes for success or failure.

-In the URL use %27 to encode ' and %20 for a space.

---

## Sample ad-hoc tests I did using Curl and SQL queries for a database snapshot.

curl -i http://localhost:4567/items

curl -i http://localhost:4567/item/100

curl -i http://localhost:4567/itemOfferings/1

curl -X put http://localhost:4567/inventory/80/91/10/20

curl -X post http://localhost:4567/distributors/4/Good%20Candy

curl -X post http://localhost:4567/distributors/5/Charleston%20Chew

curl -X post http://localhost:4567/distributors/5/Good%20Bar
# This returned {"inserted":false} because id 5 already exists in distributors.
# Main terminal shows A PRIMARY KEY constraint failed (UNIQUE constraint failed: distributors.id).

curl -X post http://localhost:4567/distributor_prices/28/1/1/0.81

curl -X post http://localhost:4567/distributor_prices/29/100/1/0.81
# Returned false due to a foreign key constraint. Value 100 does not exist in distributors.id.

curl -X post http://localhost:4567/distributor_prices/29/1/22/0.81
# Returned false due to primary key constraint with item.id of 22.

curl -i http://localhost:4567/cheapest_price/1/25
curl -i http://localhost:4567/cheapest_price/2/50

curl -X DELETE http://localhost:4567/inventory/80
curl -X DELETE http://localhost:4567/distributors/5

curl -X post http://localhost:4567/item/18/Sweet%20Apple
curl -X post http://localhost:4567/item/18/Sweet%20Cherry
# Correctly returned {"inserted": false}. Main showed SQL error due to a duplicate key.

curl -X post http://localhost:4567/item/500/Marzepan
# 'select * from items;' showed {"id":500,"name":"Marzepan"}

curl -i -X post http://localhost:4567/item/x/Marzepan
# Response:
# HTTP/1.1 500 Server Error
# Content-Type: text/html;charset=utf-8

curl -i -X post http://localhost:4567/item/539/Ginger%20Chocolate
# Response: {"inserted":true}
# Item existed in DB

curl -i -X post http://localhost:4567/item/808/11%20Vanilla
# Response: {"inserted":true}
# Item existed in DB

curl -i -X post http://localhost:4567/item/400/$$%20Dollar%20Candy
# Response: {"inserted":true}
# {"id":400,"name":"145907 Dollar Candy"} in DB. This $ converted in some ASCII way.